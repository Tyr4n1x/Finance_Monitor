@using Microsoft.EntityFrameworkCore
@using Finance_Monitor.Models
@using Finance_Monitor.Data
@inject IDbContextFactory<IncomeContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="income-form">
    <EditForm method="post" Model="Income" OnSubmit="AddIncome" FormName="create" Enhance>
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="description" class="form-label">Description:</label>
            <InputText id="description" @bind-Value="Income.Description" class="form-control" aria-required="true" />
            <ValidationMessage For="() => Income.Description" class="text-danger" />
        </div>
        <div class="mb-3">
            <label for="date" class="form-label">Date:</label>
            <InputDate id="date" @bind-Value="Income.Date" class="form-control" aria-required="true" />
            <ValidationMessage For="() => Income.Date" class="text-danger" />
        </div>
        <div class="mb-3">
            <label for="amount" class="form-label">Amount:</label>
            <RadzenNumeric id="amount" @bind-Value="Income.Amount" class="form-control" Format="c" />
            <ValidationMessage For="() => Income.Amount" class="text-danger" />
        </div>
        <div class="mb-3">
            <label for="categories" class="form-label">Categories:</label>
            <RadzenDropDown @bind-Value=@selectedCategories
                Data=@Categories
                Name="IncomeCategories"
                MaxSelectedLabels="3"
                SelectedItemsText="categories selected"
                Multiple=true
                AllowFiltering="true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowClear=true
                Placeholder="Select categories"
                Chips=true />
            <ValidationMessage For="() => Income.Categories" class="text-danger" />
        </div>
        <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    private Income Income { get; set; } = new() { Date = DateOnly.FromDateTime(DateTime.Today) };

    private List<string> selectedCategories = new List<string>();
    private List<string> Categories = new List<string>();

    // Inject AuthenticationStateProvider
    private AuthenticationState authenticationState = default!;

    protected override async Task OnInitializedAsync()
    {
        // Get the current user's UserId
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        string? userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

        // Set the current user's UserId in the Income
        if (!string.IsNullOrEmpty(userId))
        {
            Income.UserId = userId;
        }

        using var context = DbFactory.CreateDbContext();

        // Fetch categories for the current user from the IncomeCategories table
        Categories = await context.IncomeCategories
                                  .Where(c => c.UserId == userId)
                                  .Select(c => c.Category)
                                  .ToListAsync();

    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddIncome()
    {

        // Set the selected categories in the Income object
        Income.Categories = selectedCategories;

        using var context = DbFactory.CreateDbContext();
        context.Incomes.Add(Income);
        await context.SaveChangesAsync();

        // Reset the form by creating a new Income object
        Income = new Income() { Date = DateOnly.FromDateTime(DateTime.Today) };
        selectedCategories = []; // Clear selected categories

        // Trigger UI refresh
        StateHasChanged();
    }
}
