@page "/incomes/edit"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Finance_Monitor.Data
@using Finance_Monitor.Models
@using Finance_Monitor.Services
@using Finance_Monitor.Components.Shared
@inject IDbContextFactory<IncomeContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject FinanceState FinanceState

<PageTitle>Edit this Income</PageTitle>

<h1>Edit</h1>

<hr />
@if (Income is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Income" OnValidSubmit="UpdateIncome" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <input type="hidden" name="Income.Id" value="@Income.Id" />
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Income.Description" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Income.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="date" class="form-label">Date:</label>
                    <InputDate id="date" @bind-Value="Income.Date" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Income.Date" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="amount" class="form-label">Amount:</label>
                    <RadzenNumeric id="amount" @bind-Value="Income.Amount" class="form-control" Format="c"/>
                    <ValidationMessage For="() => Income.Amount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="categories" class="form-label">Categories:</label>
                    <button type="button" class="btn btn-sm btn-success me-1" @onclick="AddCategory">+</button>
                    <RadzenDropDown @bind-Value="Income.Categories" class="form-control"
                                    Data=@Categories
                                    Name="IncomeCategories"
                                    MaxSelectedLabels="3"
                                    SelectedItemsText="categories selected"
                                    Multiple=true
                                    AllowFiltering="true"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowClear=true
                                    Placeholder="Select categories"
                                    Chips=true />
                    <ValidationMessage For="() => Income.Categories" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<AddCategoryDialog TItem="IncomeCategory"
                   @ref="AddCategoryDialog"
                   DialogTitle="Add a new Category"
                   DialogAction="AddCategoryConfirmed" />

<div>
    <a href="/incomes">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Income? Income { get; set; }

    private List<string> selectedCategories = new List<string>();
    private List<string> Categories = new List<string>();

    // Inject AuthenticationStateProvider
    private AuthenticationState authenticationState = default!;

    private AddCategoryDialog<IncomeCategory>? AddCategoryDialog;

    protected override async Task OnInitializedAsync()
    {
        // Get the current user's UserId
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        string? userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

        using var context = DbFactory.CreateDbContext();
        Income ??= await context.Incomes.FirstOrDefaultAsync(m => m.Id == Id);

        if (Income is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        // Fetch categories for the current user from the IncomeCategories table
        Categories = await context.IncomeCategories
                                  .Where(c => c.UserId == userId)
                                  .Select(c => c.Category)
                                  .ToListAsync();
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateIncome()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Income!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!IncomeExists(Income!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/incomes");
    }

    private bool IncomeExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Incomes.Any(e => e.Id == id);
    }

    private void AddCategory()
    {
        if (AddCategoryDialog != null)
        {
            AddCategoryDialog.Show();
            AddCategoryDialog.Context.UserId = Income.UserId;
        }
    }

    private async Task AddCategoryConfirmed(bool confirmed)
    {
        if (!confirmed || AddCategoryDialog?.Context is not IncomeCategory newCategory)
            return;

        // Assign current user ID
        newCategory.UserId = Income.UserId;

        using var context = DbFactory.CreateDbContext();
        context.IncomeCategories.Add(newCategory);
        await context.SaveChangesAsync();

        // Refresh the categories list and dropdown
        Categories = await context.IncomeCategories
                                  .Where(c => c.UserId == Income.UserId)
                                  .Select(c => c.Category)
                                  .ToListAsync();

        // Notify other components to update
        await FinanceState.NotifyCategoryAdded();

        // Trigger UI refresh
        StateHasChanged();
    }
}
