@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Finance_Monitor.Models
@using Finance_Monitor.Data
@using Finance_Monitor.Services
@using Finance_Monitor.Components.Shared
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IDbContextFactory<IncomeContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject FinanceState FinanceState

    
<div class="income-grid">
    <QuickGrid Class="table"
               Items="@FilteredIncomes"
               Virtualize="true">
        <PropertyColumn Property="income => income.Date"
                        Sortable="true"
                        InitialSortDirection="SortDirection.Descending"
                        IsDefaultSortColumn="true" />
        <PropertyColumn Property="income => income.Amount"
                        Format="C">
            <ColumnOptions>
                <p>Min: <input type="search" @bind="MinAmount" @bind:event="oninput" placeholder="minimum" /> </p>
                <p>Max: <input type="search" @bind="MaxAmount" @bind:event="oninput" placeholder="maximum" /> </p>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="income => income.Description">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="DescriptionFilter" @bind:event="oninput" placeholder="description" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <TemplateColumn Context="income"
                        Title="Categories">
            <ChildContent>
                @foreach (var category in income.Categories)
                {
                    var color = CategoryColorMap.TryGetValue(category, out var hex) ? hex : "#000000";
                    <span class="badge me-1" style="background-color:@color; color: #ffffff;">
                        @category
                    </span>
                }
            </ChildContent>
            <ColumnOptions>
                <div class="label-filter-options">
                    @foreach (var label in CategoryColorMap.Keys)
                    {
                        <label class="d-block">
                            <input type="checkbox"
                                   @onchange="() => ToggleCategoryFilter(label)"
                                   checked="@selectedLabels.Contains(label)" />
                            @label
                        </label>
                    }
                </div>
            </ColumnOptions>
        </TemplateColumn>

        <TemplateColumn Context="income">
            <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo($"incomes/edit?id={income.Id}"))">
                Edit
            </button>
            <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo($"incomes/details?id={income.Id}"))">
                Details
            </button>
            <button class="btn btn-danger" @onclick="() => DeleteIncome(income)">
                Delete
            </button>
        </TemplateColumn>
    </QuickGrid>
</div>

<DialogComponent @ref="ConfirmationDialog"
                 DialogItem=@dialogIncome
                 DialogTitle="Delete Income"
                 DialogMessage=@confirmationMessage
                 DialogAction="DeleteIncomeConfirmed">
</DialogComponent>

@code {
    private IncomeContext context = default!;

    private string DescriptionFilter = string.Empty;
    private int? MinAmount;
    private int? MaxAmount;
    private HashSet<string> selectedLabels = new();

    private Dictionary<string, string> CategoryColorMap = new();

    private string userId = string.Empty;

    private DialogComponent<Income>? ConfirmationDialog;
    private Income? dialogIncome;
    private string? confirmationMessage;

    IQueryable<Income> FilteredIncomes
    {
        get
        {
            var result = context.Incomes.AsQueryable();

            // Filter by current user's UserId
            if (!string.IsNullOrEmpty(userId))
            {
                result = result.Where(i => i.UserId == userId);
            }
            else
            {
                result = Enumerable.Empty<Income>().AsQueryable(); // Empty queryable collection
            }

            if (MinAmount.HasValue)
            {
                result = result.Where(i => i.Amount >= MinAmount.Value);
            }

            if (MaxAmount.HasValue)
            {
                result = result.Where(i => i.Amount <= MaxAmount.Value);
            }

            if (!string.IsNullOrEmpty(DescriptionFilter))
            {
                // The LINQ needs to be translated to SQL, so no arguments of type StringComparison are allowed for .Contains
                result = result.Where(i => i.Description.Contains(DescriptionFilter));
            }

            if (selectedLabels.Any())
            {
                result = result.Where(i => i.Categories.Any(c => selectedLabels.Contains(c)));
            }

            return result;
        }
    }

    private async Task RefreshGrid()
    {
        // Trigger a UI update when a new Income is added
        await InvokeAsync(StateHasChanged);
    }

    private void ToggleCategoryFilter(string category)
    {
        if (!selectedLabels.Add(category))
            selectedLabels.Remove(category);
    }

    protected override async Task OnInitializedAsync()
    {
        // Get the current user's UserId
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value ?? string.Empty;

        context = DbFactory.CreateDbContext();

        // Subscribe to the event
        FinanceState.OnFinanceAdded += RefreshGrid;

        // Create a dictionary for eaasy color mapping of Income Categories
        CategoryColorMap = await context.IncomeCategories
            .Where(c => c.UserId == userId)
            .ToDictionaryAsync(c => c.Category, c => c.ColorHex);
    }

    public async ValueTask DisposeAsync()
    {
        await context.DisposeAsync();

        // Unsubscribe from the event to prevent memory leaks
        FinanceState.OnFinanceAdded -= RefreshGrid;
    }

    private void DeleteIncome(Income income)
    {
        dialogIncome = income;
        confirmationMessage = $"Are you sure you want to delete this income: {income.Description}?";
        ConfirmationDialog?.Show();
    }

    private async Task DeleteIncomeConfirmed(bool confirmed)
    {
        var income = ConfirmationDialog?.DialogItem; // Retrieve the income from the dialog
        if (confirmed && income != null)
        {
            using var context = DbFactory.CreateDbContext();
            context.Incomes.Remove(income);
            await context.SaveChangesAsync();
        }
    }
}
