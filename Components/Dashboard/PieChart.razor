@using Finance_Monitor.Services
@using System.Globalization
@inject IDataService dataService;
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="pie-chart">
    @if (!MonthData.Data.Any())
    {
        <p>No data available for the current month.</p>
    }
    else
    {
    <RadzenChart>
        <RadzenPieSeries Fills="@Colors"
                         Data="@MonthData.Data"
                         Title="@MonthData.Label"
                         CategoryProperty="Category"
                         ValueProperty="Amount">
                <TooltipTemplate Context="item">
                    <div><strong>@item.Category:</strong> @FormatAsEUR(item.Amount)</div>
                </TooltipTemplate>
                <ChildContent>
                    <RadzenSeriesDataLabels Visible="true" />
                </ChildContent>
        </RadzenPieSeries>
            <RadzenValueAxis Formatter="@(value => FormatAsPercentage(value))" />
    </RadzenChart>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public string ChartType { get; set; } = "expenses";  // "incomes" or "expenses"

    [Parameter]
    public ICollection<string>? Colors { get; set; }

    public MonthlyData MonthData { get; set; } = new MonthlyData();

    private string userId = string.Empty;

    private string FormatAsEUR(decimal value)
    {
        return value.ToString("C2", CultureInfo.CreateSpecificCulture("nl-BE"));
    }

    string FormatAsPercentage(object value)
    {
        try
        {
            decimal amount = value switch
            {
                decimal d => d,
                double d => Convert.ToDecimal(d),
                float f => Convert.ToDecimal(f),
                int i => i,
                long l => l,
                _ => throw new InvalidCastException("Unsupported type for percentage formatting.")
            };

            decimal total = MonthData.Data.Sum(x => x.Amount);
            if (total == 0)
                return "0%";

            decimal percentage = (amount / total) * 100;
            return $"{Math.Round(percentage)}%";
        }
        catch
        {
            return "0%";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Get the current user's UserId
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value ?? string.Empty;

        if (ChartType == "incomes")
        {
            MonthData = await dataService.LoadCurrentMonthIncomes(userId) ?? new MonthlyData();
        }
        else if (ChartType == "expenses")
        {
            MonthData = await dataService.LoadCurrentMonthExpenses(userId) ?? new MonthlyData();
        }
        else
        {
            throw new InvalidOperationException("Invalid ChartType");
        }

        await InvokeAsync(StateHasChanged);
    }
}
