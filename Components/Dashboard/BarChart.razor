@using System.Globalization
@using Finance_Monitor.Services
@inject IDataService dataService;
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="bar-chart">
    @if (!yearlyExpenses.Any() && !yearlyIncomes.Any())
    {
        <p>Loading data...</p>
    }
    else if (yearlyExpenses.All(expense => expense.Amount == 0) && yearlyIncomes.All(income => income.Amount == 0))
    {
        <p>No data available for the current year.</p>
    }
    else
    {
        <RadzenChart>
            <RadzenColumnSeries
            Fill="#AACDBE"
            Data="@yearlyIncomes"
            CategoryProperty="Month"
            ValueProperty="Amount"
            Title="Incomes"/>
            <RadzenColumnSeries
            Fill="#EA907A"
            Data="@yearlyExpenses"
            CategoryProperty="Month"
            ValueProperty="Amount"
            Title="Expenses" />
            <RadzenColumnOptions
            Radius="5"
            Width="30" />
            <RadzenValueAxis
            Formatter="@FormatAsEUR"
            Min="@minAmount.ToString()"
            Step="@step.ToString()"
            Max="@maxAmount.ToString()">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Amount in €" />
            </RadzenValueAxis>
        </RadzenChart>
    }

</div>

@code {

    private ICollection<YearlyItem> yearlyExpenses = new List<YearlyItem>();
    private ICollection<YearlyItem> yearlyIncomes = new List<YearlyItem>();

    private string userId = string.Empty;

    private decimal minAmount = 0;
    private decimal maxAmount;
    private decimal step;

    string FormatAsEUR(object value)
    {
        return ((double)value).ToString("C2", CultureInfo.CreateSpecificCulture("nl-BE"));
    }

    protected override async Task OnInitializedAsync()
    {
        // Get the current user's UserId
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value ?? string.Empty;

        yearlyExpenses = await dataService.LoadCurrentYearExpenses(userId) ?? new List<YearlyItem>();
        yearlyIncomes = await dataService.LoadCurrentYearIncomes(userId) ?? new List<YearlyItem>();

        minAmount = 0;
        maxAmount = Math.Max(
            yearlyExpenses.Any() ? yearlyExpenses.Max(expense => expense.Amount) : 0,
            yearlyIncomes.Any() ? yearlyIncomes.Max(income => income.Amount) : 0
        );
        // Round up to the nearest hundred
        maxAmount = Math.Ceiling(maxAmount / 100) * 100;
        step = (maxAmount - minAmount)/5;

        await InvokeAsync(StateHasChanged);
    }

}
