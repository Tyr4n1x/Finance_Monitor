@using Finance_Monitor.Components.Shared
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Finance_Monitor.Models
@using Finance_Monitor.Data
@using Microsoft.AspNetCore.Identity;

@inject UserManager<ApplicationUser> UserManager
@inject IDbContextFactory<ApplicationUserContext> DbFactory

<div class="user-grid">
    <QuickGrid Class="table" Items="@FilteredUsers" Virtualize="true">
        <PropertyColumn Property="User => User.UserName" Sortable="true" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn="true" >
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" @bind="UserNameFilter" @bind:event="oninput" placeholder="username" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="User => User.Email">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" @bind="EmailFilter" @bind:event="oninput" placeholder="email" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="User => User.Name" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="NameFilter" @bind:event="oninput" placeholder="name" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="User => User.FirstName">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" @bind="FirstNameFilter" @bind:event="oninput" placeholder="first name" />
                </div>
            </ColumnOptions>
        </PropertyColumn>

        <TemplateColumn Context="User">
            <button class="btn btn-primary" @onclick="() => EditUser(User)">Edit</button>
            <button class="btn btn-danger" @onclick="() => DeleteUser(User)">Delete</button>
        </TemplateColumn>
    </QuickGrid>
</div>

<DialogComponent @ref="ConfirmationDialog"
                DialogItem=@dialogUser
                DialogTitle="Delete User"
                DialogMessage=@confirmationMessage
                DialogAction="DeleteUserConfirmed">
</DialogComponent>

<EditUserDialog TKey="ApplicationUser"
                @ref="EditDialog"
                AvailableRoles="AvailableRoles"
                DialogAction="EditUserConfirmed" />

@code {
    private List<ApplicationUser> Users = new();
    private List<string> AvailableRoles = new();

    private string UserNameFilter = string.Empty;
    private string EmailFilter = string.Empty;
    private string NameFilter = string.Empty;
    private string FirstNameFilter = string.Empty;

    private DialogComponent<ApplicationUser>? ConfirmationDialog;
    private ApplicationUser? dialogUser;
    private string? confirmationMessage;

    private EditUserDialog<ApplicationUser> EditDialog;
    private string? editUserId;

    IQueryable<ApplicationUser> FilteredUsers
    {
        get
        {
            var result = Users.AsQueryable();

            if (!string.IsNullOrEmpty(UserNameFilter))
            {
                // The LINQ needs to be translated to SQL, so no arguments of type StringComparison are allowed for .Contains
                result = result.Where(e => e.UserName != null && e.UserName.Contains(UserNameFilter));
            }

            if (!string.IsNullOrEmpty(EmailFilter))
            {
                // The LINQ needs to be translated to SQL, so no arguments of type StringComparison are allowed for .Contains
                result = result.Where(e => e.Email != null && e.Email.Contains(EmailFilter));
            }

            if (!string.IsNullOrEmpty(NameFilter))
            {
                // The LINQ needs to be translated to SQL, so no arguments of type StringComparison are allowed for .Contains
                result = result.Where(e => e.Name != null && e.Name.Contains(NameFilter));
            }

            if (!string.IsNullOrEmpty(FirstNameFilter))
            {
                // The LINQ needs to be translated to SQL, so no arguments of type StringComparison are allowed for .Contains
                result = result.Where(e => e.FirstName != null && e.FirstName.Contains(FirstNameFilter));
            }

            return result;
        }
    }

    protected override async Task OnInitializedAsync()
    {
      // grab a brand-new context instance
      await using var context = await DbFactory.CreateDbContextAsync();

      // 1) Load roles
      AvailableRoles = await context.Roles
                                .Select(r => r.Name!)
                                .ToListAsync();

      // 2) Load users
      Users = await context.Users
                       .ToListAsync();
    }

    private async void EditUser(ApplicationUser user)
    {
        editUserId = user.Id;
        var userRoles = await UserManager.GetRolesAsync(user);
        var currentRole = userRoles.FirstOrDefault() ?? "";
        EditDialog.Show(currentRole);
    }

    private async Task EditUserConfirmed((bool confirmed, string selectedRole) args)
    {
        if (!args.confirmed || editUserId == null)
            return;

        // 1) fetch a brand-new user instance by ID
        var user = await UserManager.FindByIdAsync(editUserId);
        if (user == null) return;

        // 2) remove **all** existing roles, then add the newly chosen one
        var currentRoles = await UserManager.GetRolesAsync(user);
            if (currentRoles.Any())
                {
                    await UserManager.RemoveFromRolesAsync(user, currentRoles);
                }
            if (!string.IsNullOrEmpty(args.selectedRole))
                {
                    await UserManager.AddToRoleAsync(user, args.selectedRole);
                }

        // 3) reload & refresh
        Users = await UserManager.Users.ToListAsync();
        StateHasChanged();
    }


    private void DeleteUser(ApplicationUser user)
    {
        dialogUser = user;
        confirmationMessage = $"Are you sure you want to delete user {user.UserName}?";
        ConfirmationDialog?.Show();
    }

    private async Task DeleteUserConfirmed(bool confirmed)
    {
        var user = ConfirmationDialog?.DialogItem; // Retrieve the user from the dialog
        if (confirmed && user != null)
        {
            // Delete the user
            await UserManager.DeleteAsync(user);

            await using var context = await DbFactory.CreateDbContextAsync();
            // Refresh the data by reloading the context
            Users = await context.Users.ToListAsync();

            // Trigger UI refresh
            StateHasChanged();
        }
    }
}
